## 题目描述

## 解题思路
二叉树操作主要还是利用尾递归或者循环遍历这两种思路，进而涉及DFS（主要利用递归或者栈实现）或者BFS（主要利用队列实现）。剩下的只需要按照这些思路即可。


## AC代码

> 递归，

- 若为空树返回0；
- 若左子树为空，则返回右子树的最小深度+1；（加1是因为要加上根这一层，下同）
- 若右子树为空，则返回左子树的最小深度+1；
- 若左右子树均不为空，则取左、右子树最小深度的较小值，+1；


```
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.lang.Math;
public class Solution {
    public int run(TreeNode root) {
        if (root==null){
            return 0;
        }
        int l = run(root.left);
        int r = run(root.right);
        if (l==0 || r==0)
            return 1 + l + r;
        return 1 + Math.min(l,r);
    }
}
```


> 广度优先遍历，通过队列

```
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.Queue;
import java.util.LinkedList;
public class Solution {
    public int run(TreeNode root) {
        if (root==null){
            return 0;
        }
        if (root.left==null && root.right==null){
            return 1;
        }
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        int level = 1;
        while (!queue.isEmpty()){
            int size = queue.size();
            for (int i=0; i< size; i++){
                TreeNode node = queue.poll();
                if (node.left==null && node.right==null){
                    return level;
                }
                
                if (node.left!=null){
                    queue.add(node.left);
                }
                
                if (node.right!=null){
                    queue.add(node.right);
                }
            }
            level++;
        }
        return level;
    }
}
```